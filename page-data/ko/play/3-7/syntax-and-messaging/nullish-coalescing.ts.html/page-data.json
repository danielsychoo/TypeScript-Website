{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/3-7/syntax-and-messaging/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"ko","html":"\n nullish coalescing 연산자는 || 연산자의 대안입니다.\n 왼쪽의 결과가 null 또는 undefined일 경우,\n 오른쪽의 결과를 반환합니다.\n\n 그에 반해, ||는 falsy 검사를 사용하므로\n 빈 문자열 또는 숫자 0은 false로 여깁니다.\n\n 이 기능의 좋은 예시는 key가 전달되지 않았을 때\n 기본값을 갖는 일부분의 오브젝트를 다루는 것입니다.\n\n<code><pre>\ninterface AppConfiguration {\n  // 기본값: \"(no name)\"; 빈 문자열은 유효\n  name: string;\n\n  // 기본값: -1; 0은 유효\n  items: number;\n\n  // 기본값: true\n  active: boolean;\n}\n\nfunction updateApp(config: Partial<AppConfiguration>) {\n  // null-coalescing 연산자로 설정\n  config.name = config.name ?? \"(no name)\";\n  config.items = config.items ?? -1;\n  config.active = config.active ?? true;\n\n  // 현재 솔루션\n  config.name = typeof config.name === \"string\" ? config.name : \"(no name)\";\n  config.items = typeof config.items === \"number\" ? config.items : -1;\n  config.active = typeof config.active === \"boolean\" ? config.active : true;\n\n  // 잘못된 데이터를 설정할 수 있는 || 연산자 사용\n  config.name = config.name || \"(no name)\"; // \"\" 입력을 허용하지 않음\n  config.items = config.items || -1; // 0 입력을 허용하지 않음\n  config.active = config.active || true; // 아주 잘못된 사례, 항상 true\n}\n\n</pre></code>\n// 여러분은 3.7 버전에 대한 블로그 글에서 nullish coalescing에 대해 더 많은 것을 읽어보실 수 있습니다:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/","redirectHref":"ko/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}