{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/4-0/new-ts-features/unknown-in-catch.ts.html","result":{"pageContext":{"name":"Unknown in Catch","title":"Unknown in Catch","lang":"ko","html":"\n JavaScript는 어떠한 값도 전달할 수 있기 때문에,\n TypeScript는 에러의 타입 선언을 지원하지 않습니다\n\n<code><pre>\ntry {\n  // ..\n} catch (e) {}\n\n</pre></code>\n// 역사적으로, catch문의 `e`는 기본적으로\n any 타입으로 설정되는 것을 의미합니다.\n 그래서 어떠한 프로퍼티 접근도 마음대로 접근할 수 있는 자유를 허용했었습니다.\n 4.0에서는, `any`와 `unknown` 모두 허용하기 위해\n catch 절에서 타입 할당의 제한을 완화했습니다.\n\n any 타입으로 동일한 동작\n<code><pre>\ntry {\n  // ..\n} catch (e) {\n  e.stack;\n}\n\n// unknown 타입으로 명확한 동작:\n\ntry {\n  // ..\n} catch (e: unknown) {\n  // 타입 시스템이 `e`에 대해 알기 전까진 사용할 수 없습니다. \n  // 더 많은 정보 살펴보세요:\n  // 예시:unknown-and-never\n  e.stack;\n\n  if (e instanceof SyntaxError) {\n    e.stack;\n  }\n}\n","redirectHref":"ko/play/?ts=4.0.2#example/unknown-in-catch"}},"staticQueryHashes":[]}