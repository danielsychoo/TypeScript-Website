{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/4-0/new-js-features/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"ko","html":" # Nullish Coalescing\n\n `??`는 `||`의 일반적인 사용 방법을 보완하는 새로운 연산자입니다.\n `===`가 `==`의 사용을 더 엄격한 등호 형태로\n 보완하는 방식과 같습니다.\n\n 연산자를 이해하기 위해 어떻게 ||가 동작하는지 봅시다:\n\n<code><pre>\nconst response = {\n  nullValue: null,\n  headerText: \"\",\n  animationDuration: 0,\n  height: 400,\n  showSplashScreen: false,\n} as const;\n\nconst undefinedValue = response.undefinedValue || \"some other default\";\n// 결과는 이렇게 됩니다: 'some other default'\n\nconst nullValue = response.nullValue || \"some other default\";\n\n</pre></code>\n// 2개의 예시는 대부분 언어에서 비슷하게 동작합니다.\n 하나의 도구로써 || 연산자는 기본값을 설정할 때 매우 적합하지만,\n JavaScript falsy 체크는 몇 가지 일반적인 값으로 여러분을 당황하게 할 수 있습니다:\n\n 의도와 다를 수 있습니다. ''은 falsy고, 결과는 다음과 같습니다: 'Hello, world!'\n<code><pre>\nconst headerText = response.headerText || \"Hello, world!\";\n\n// 의도와 다를 수 있습니다. 0은 falsy고, 결과는 다음과 같습니다: 300\nconst animationDuration = response.animationDuration || 300;\n\n// 의도와 다를 수 있습니다. false는 falsy고, 결과는 다음과 같습니다: true\nconst showSplashScreen = response.showSplashScreen || true;\n\n</pre></code>\n// 대신 ??으로 전환하여 사용한다면,\n === 등호는 양쪽을 비교하기 위해 사용됩니다:\n\n<code><pre>\nconst emptyHeaderText = response.headerText ?? \"Hello, world!\";\nconst zeroAnimationDuration = response.animationDuration ?? 300;\nconst skipSplashScreen = response.showSplashScreen ?? true;\n","redirectHref":"ko/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}