{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/typescript-from-scratch.html","result":{"data":{"markdownRemark":{"id":"b4de0f9c-0c72-5141-a5e2-b1110e19d7cb","excerpt":"Parabéns por escolher TypeScript como uma das suas primeiras linguagens de programação - você já está tomando boas decisões! Você provavelmente já ouviu falar…","html":"<p>Parabéns por escolher TypeScript como uma das suas primeiras linguagens de programação - você já está tomando boas decisões!</p>\n<p>Você provavelmente já ouviu falar que o TypeScript é um “sabor” ou “variação” do JavaScript.\nA relação entre TypeScript (TS) e Javascript (JS) é mais que única entre as linguagens de programação moderna, aprender mais sobre este relacionamento irá lhe ajudar a entender como o TypeScript complementa o JavaScript.</p>\n<h2 id=\"o-que-é-o-javascript-uma-breve-história\" style=\"position:relative;\"><a href=\"#o-que-%C3%A9-o-javascript-uma-breve-hist%C3%B3ria\" aria-label=\"o que é o javascript uma breve história permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O que é o JavaScript? Uma breve história</h2>\n<p>JavaScript (também conhecido como ECMAScript) iniciou sua vida como uma simples linguagem script para browsers.\nNa época ele foi inventado com a intenção de ser utilizado em pequenas porções de código embutido em páginas web - escrever mais do que algumas dezenas de código seria visto como algo não usual.\nDevido a isto, os primeiros browsers executavam tais códigos de forma lenta.\nNo entanto, ao longo do tempo, JS se tornou mais popular e os desenvolvedores web começaram a utilizá-lo para criar experiências interativas.</p>\n<p>Os desenvolvedores de navegadores web responderam a este aumento do uso de JS otimizando seus motores de execução (compilação dinâmica) e estendendo o que poderia ser feito com a linguagem(adicionado APIs), o que fez aumentar ainda mais a utilização do JS pelos desenvolvedores web.\nEm sites modernos, o seu browser está frequentemente rodando aplicações que contém de centenas a milhares de linhas de código.\nEste aumento gradual e constante da “web”, fez com que o que iniciou de uma simples teia de páginas estáticas, evoluísse para uma plataforma de <em>aplicações</em> de todos os tipos.</p>\n<p>Mais do que isso, JS se tornou popular o bastante para ser utilizado fora do contexto dos browsers, como por exemplo podemos citar a implementação de servidores JS utilizando node.js.\nA natureza “rode em qualquer lugar” faz do JS uma escolha atrativa para o desenvolvimento em múltiplas plataformas.\nAtualmente existem muitos programados que usam <em>somente</em> JavaScript para programar em toda a sua stack!</p>\n<p>Para resumir, nós temos uma linguagem que foi projetada para usos rápidos, que cresceu para se tornar uma ferramenta completa para escrever aplicações com milhões de linhas de código.\nTodas as linguagems tem seus próprios caprichos - estranhesas e surpresas, e o início humilde do JavaScript o faz ter <em>muitos</em> destes. Alguns exemplos:</p>\n<ul>\n<li>\n<p>O operador de igualdade do JavaScript (<code>==</code>) <em>força</em> seus argumentos, levando a comportamentos estranhos:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\"> == </span><span style=\"color: #09835A\">0</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #008000\">// É verdade, mas por que?</span>\n<span style=\"color: #000000\">}</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #09835A\">1</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #1A1A1A\">x</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #09835A\">3</span><span style=\"color: #000000\">) {</span>\n<span style=\"color: #008000\">// Verdade para *qualquer* valor de x!</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n</li>\n<li>\n<p>JavaScript também permite o acesso a propriedades que não estão presentes:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\"> = { width: </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">, height: </span><span style=\"color: #09835A\">15</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #008000\">// Porquê NaN? Difícil dizer!</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\">area</span><span style=\"color: #000000\"> = </span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.width * </span><span style=\"color: #1A1A1A\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\">heigth</span><span style=\"color: #000000\">;</span></code></div></pre>\n<p>Muitas linguagems de programação poderiam disparar uma exceção quando estes tipos de erros ocorrerem, algumas poderiam fazê-lo durante a compilação - antes de qualquer código ser executado.\nQuando você escreve programas pequenos, estas excêntricidades são gerenciáveis; mas quando você está escrevendo aplicações com centenas de milhares de código, estas surpresas constantes tornam-se um sério problema.</p>\n</li>\n</ul>\n<h2 id=\"typescript-um-checker-estático-de-tipos\" style=\"position:relative;\"><a href=\"#typescript-um-checker-est%C3%A1tico-de-tipos\" aria-label=\"typescript um checker estático de tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript: Um Checker Estático de Tipos</h2>\n<p>Nós dissemos anteriormente que algumas linguagens de programação não permitem que programas sejam executados caso tenham qualquer bug.\nDetecção de erros sem ser a necessidade de rodar o programa é definido como <em>check estático</em>.\nDeterminar o que é um erro e o que não é baseado nos tipos dos valores sendo operados é conhecido como checagem estática de <em>tipos</em>.</p>\n<p>O TypeScript checa os erros do programa programa antes da execução, e faz isso baseado nos <em>tipos de valores</em>, ele é um <em>checker estático de tipos</em>.\nPor exemplo, o último código acima tem um erro devido ao <em>tipo</em> do objeto <code>obj</code>.\nAqui está o erro que o TypeScript encontrou:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    width: number;&amp;#13;    height: number;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">= { <data-lsp lsp='(property) width: number'>width</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #000000\">, <data-lsp lsp='(property) height: number'>height</data-lsp>: </span><span style=\"color: #09835A\">15</span><span style=\"color: #000000\"> };</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const area: number'>area</data-lsp> </span><span style=\"color: #000000\">= </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    width: number;&amp;#13;    height: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) width: number'>width</data-lsp> * </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    width: number;&amp;#13;    height: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='any'>heigth</data-lsp></data-err></span><span style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Property 'heigth' does not exist on type '{ width: number; height: number; }'. Did you mean 'height'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'heigth' does not exist on type '{ width: number; height: number; }'. Did you mean 'height'?</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMEYBQBjOAO0QBdQ4AjAK1AF5QBvUAdwEsATUgC1WwAYANKG6Q2Ac26k+GUAF8A3AWJlQAQ2iQ19CjQB07Lt1AAqXdT2iJPBUA'>Try</a></div></pre>\n<h3 id=\"um-superset-tipado-do-javascript\" style=\"position:relative;\"><a href=\"#um-superset-tipado-do-javascript\" aria-label=\"um superset tipado do javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Um superset tipado do JavaScript</h3>\n<p>Mas, como o TypeScript se relaciona com o JavaScript?</p>\n<h4 id=\"sintaxe\" style=\"position:relative;\"><a href=\"#sintaxe\" aria-label=\"sintaxe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sintaxe</h4>\n<p>O TypeScript é uma linguagem que é um <em>superset</em> do JavaScript: portanto a sintaxe do JS é aceita pelo TS.\nA sintaxe se refere à maneira em que o código é escrito para criar um programa.\nPor exemplo, o código abaixo tem um erro de <em>sintaxe</em> porque está faltando um <code>)</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let a: number'>a</data-lsp> </span><span style=\"color: #000000\">= (</span><span style=\"color: #09835A\"><data-err>4</data-err></span>\n<span class=\"error\"><span>')' expected.</span><span class=\"code\">1005</span></span><span class=\"error-behind\">')' expected.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwAYMFYBQAbSAF1AENQBeUACgBYg'>Try</a></div></pre>\n<p>O TypeScript não considera nenhum código JavaScript como sendo um erro por conta de sua sintaxe.\nIsto significa que você pode utilizar qualquer código JavaScript válido e colocá-lo em um arquivo TypeScript sem se preocupar sobre como exatamente ele está escrito.</p>\n<h4 id=\"tipos\" style=\"position:relative;\"><a href=\"#tipos\" aria-label=\"tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos</h4>\n<p>Por outro lado, o TypeScript é um superset <em>tipado</em> o que significa que, ele adiciona regras em relação a como diferentes tipos de valores podem ser utilizados.\nO erro anterior sobre <code>obj.heigth</code> não é um erro de <em>sintaxe</em>: é um erro a respeito de utilizar um <em>tipo</em> de valor de uma maneira incorreta.</p>\n<p>Abaixo um outro exemplo de código JavaScript que você pode rodar no seu browser, ele <em>irá</em> mostrar um valor no console.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #000000\">console.log(</span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\"> / []);</span></code></div></pre>\n<p>Este é um programa sintaticamente-válido, irá mostrar <code>Infinity</code> no console.\nO TypeScript, por outro lado, considera sem sentido uma divisão de um número por um array e irá mostrar um erro:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #000000\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #09835A\">4</span><span style=\"color: #000000\"><data-err> / []);</data-err></span>\n<span class=\"error\"><span>The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.</span><span class=\"code\">2363</span></span><span class=\"error-behind\">The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsGBQBjOAO0TgBtIA6MuAcwAoAWUMAbQF0BKAbiA'>Try</a></div></pre>\n<p>É possível que você realmente <em>tinha</em> a intenção de dividir o número por um array, talvez por curiosidade, mas na maioria das vezes, este é um erro de programação.\nO check de tipos do TypeScript é projetado para permitir que programas corretos rodarem enquanto pega a maioria dos erros comuns.\n(Mais tarde, nós iremos aprender sobre os ajustes que você pode utilizar para configurar quão rigidamente o TypeScript irá checar o seu código.)</p>\n<p>Se você mover um código dentro de um arquivo JavaScript para um arquivo TypeScript, você verificará <em>erros de tipo</em> dependendo de como o código é escrito.\nEles podem ser problemas legítimos com o seu código, ou o TypeScript pode estar sendo muito conservador.\nAo longo deste guia nós iremos demonstrar como adicionar várias sintaxes TypeScript para elimitar tais erros.</p>\n<h4 id=\"comportamento-em-tempo-de-execução\" style=\"position:relative;\"><a href=\"#comportamento-em-tempo-de-execu%C3%A7%C3%A3o\" aria-label=\"comportamento em tempo de execução permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comportamento Em Tempo de Execução</h4>\n<p>O TypeScript é também uma linguagem de programação que preserva o <em>comportamento em tempo de execução</em> do JavaScript.\nPor exemplo, a divisão por zero produz <code>Infinity</code> ao invés de disparar uma exceção em tempo de execução.\nComo princípio, o TypeScript <strong>nunca</strong> modifica o comportamento que do código JavaScript tem em tempo de execução.</p>\n<p>Isto significa que se você mover um código do JavaScript para o TypeScript, é <strong>garantido</strong> que ele execute da mesma maneira, mesmo se o TypeScript pensar que o código tem erros de tipo.</p>\n<p>Manter o mesmo comportamento em tempo de execução do JavaScript é uma premisa fundamental do TypeScript porque significa que você pode fazer uma transição fácil entre as duas linguagens sem se preocupar com diferenças sutis que podem fazer o seu código parar de funcionar.</p>\n<!--\nMissing subsection on the fact that TS extends JS to add syntax for type\nspecification.  (Since the immediately preceding text was raving about\nhow JS code can be used in TS.)\n-->\n<h4 id=\"apagamento-de-tipos\" style=\"position:relative;\"><a href=\"#apagamento-de-tipos\" aria-label=\"apagamento de tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apagamento de Tipos</h4>\n<p>A grosso modo, uma vez que o compilador do TypeScript completa a checagem do seu código, ele <em>apaga</em> os tipos para produzir como resultado o código “compilado”.\nIsto significa que uma vez que o seu código é compilado, o JS resultante não tem nenhuma informação de tipo.</p>\n<p>Isto também significa que o TypeScript nunca modifica o <em>comportamento</em> do seu programa baseado nos tipos inferidos.\nA conclusão é que enquanto você pode ver erros de tipo durante a compilação, o sistema de tipos em si não tem influência em como o seu programa funciona quando ele roda.</p>\n<p>Finalmente, o TypeScript não fornece nenhuma biblioteca adicional ao JS.\nOs seus programas irão utilizar a mesma biblioteca padrão (ou externas) do JavaScript, logo não há nenhum framework específico do TypeScript para aprender adicionalmente.</p>\n<!--\nShould extend this paragraph to say that there's an exception of\nallowing you to use newer JS features and transpile the code to an older\nJS, and this might add small stubs of functionality when needed.  (Maybe\nwith an example --- something like `?.` would be good in showing readers\nthat this document is maintained.)\n-->\n<h2 id=\"aprendendo-javascript-e-typescript\" style=\"position:relative;\"><a href=\"#aprendendo-javascript-e-typescript\" aria-label=\"aprendendo javascript e typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aprendendo JavaScript e TypeScript</h2>\n<p>Nós frequentemente vemos a seguinte questão “Eu devo aprender a programar em JavaScript ou TypeScript?“.</p>\n<p>A resposta é que você não pode aprender TypeScript sem aprender JavaScript!\nO TypeScript compartilhar a sintaxe e o comportamento em tempo de execução do JavaScript, logo qualquer coisa que você aprenda sobre o JavaScript irá ajudá-lo a aprender TypeScript ao mesmo tempo.</p>\n<p>Existem muitos, muitos recursos disponíveis para programadores aprenderem JavaScript; você <em>não</em> deve ignorar estes recursos se você estiver escrevendo TypeScript.\nPor exemplo, no StackOverflow existem 20 vezes mais perguntas com a tag <code>javascript</code> do que <code>typescript</code>, mas <em>todas</em> as perguntas do <code>javascript</code> também se aplicam ao TypeScript.</p>\n<p>Se você se encontrar procurando por alguma coisa do tipo “como ordenar uma lista em TypeScript”, lembre-se: <strong>O TypeScript é um JavaScript em tempo de execução com uma checagem de tipos em tempo de compilação</strong>.\nA maneira como você ordena uma lista em TypeScript é a mesma na qual você faz em JavaScript.\nTambém é legal se você encontrar algum conteúdo que usa o TypeScript diretamente, mas não se limite a pensar que você precisa de respostas específicas para o TypeScript sobre como executar tarefas em tempo de execução.</p>\n<hr>\n<p>A partir daqui, nós recomendamos que você aprenda alguns fundamentos do JavaScript (o <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide\">JavaScript guide at the Mozilla Web Docs</a> é um bom ponto de partida.)</p>\n<p>Uma vez que você esteja se sentindo confortável, você pode voltar para ler <a href=\"/docs/handbook/typescript-in-5-minutes.html\">TypeScript para Programadores JavaScript</a>, e iniciar <a href=\"/docs/handbook/intro.html\">o handbook</a> o explorar os <a href=\"/play#show-examples\">Exemplos de playground</a>.</p>\n<!-- Note: I'll be happy to write the following... -->\n<!--\n## Types\n\n    * What's a type? (For newbies)\n      * A type is a *kind* of value\n      * Types implicitly define what operations make sense on them\n      * Lots of different kinds, not just primitives\n      * We can make descriptions for all kinds of values\n      * The `any` type -- a quick desctiption, what it is, and why it's bad\n    * Inference 101\n      * Examples\n      * TypeScript can figure out types most of the time\n      * Two places we'll ask you what the type is: Function boundaries, and later-initialized values\n    * Co-learning JavaScript\n      * You can+should read existing JS resources\n      * Just paste it in and see what happens\n      * Consider turning off 'strict' -->","headings":[{"value":"O que é o JavaScript? Uma breve história","depth":2},{"value":"TypeScript: Um Checker Estático de Tipos","depth":2},{"value":"Um superset tipado do JavaScript","depth":3},{"value":"Sintaxe","depth":4},{"value":"Tipos","depth":4},{"value":"Comportamento Em Tempo de Execução","depth":4},{"value":"Apagamento de Tipos","depth":4},{"value":"Aprendendo JavaScript e TypeScript","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/typescript-from-scratch.html","title":"TypeScript para o Novo Programador","disable_toc":null,"handbook":null,"oneline":"Aprenda TypeScript do zero","beta":null}},"prev":null,"next":null},"pageContext":{"id":"0typescript-para-o-novo-programador","slug":"/pt/docs/handbook/typescript-from-scratch.html","repoPath":"/packages/documentation/copy/pt/get-started/TS for the New Programmer.md","lang":"pt","modifiedTime":"2021-01-31T17:54:15.204Z"}},"staticQueryHashes":[]}